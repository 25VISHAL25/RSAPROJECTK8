name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init with backend config
    #   run: |
    #     terraform init \
    #     -backend-config="resource_group_name=my-rg" \
    #     -backend-config="storage_account_name=mystorage" \
    #     -backend-config="container_name=tfstate" \
    #     -backend-config="key=dev.terraform.tfstate"

  
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file="Terraform/dev.tfvars"

      # On push to "master", build or change infrastructure according to Terraform configuration files
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -var-file="dev.tfvars" -auto-approve
